import { expect } from 'chai';
import TimeStateStepperImpl from './timeStateStepper';
import Storage from './storage';
import { stringOpt } from './testOptions';

describe('TimeStateStepperImpl', () => {
    describe('getClosestBlockIdx', () => {
        const blks = [];
        for (let i = 1; i <= 10; i++) {
            blks.push({
                initialState: 'hello',
                time: i * 100,
                changes: { 1: 1 },
            });
        }

        let tss;
        it('should init stepper', async () => {
            const db = await Storage.memory();
            const ts = await db.createTimeState(100);
            db.provider.timeStates[ts.id].blocks = blks;
            tss = new TimeStateStepperImpl({
                ...stringOpt,
                changeThreshold: 5,
                storageProvider: db,
            });
            await tss.init(ts.id);
        });

        it('should get first block when time = 0', () => {
            expect(tss.getClosestBlockIdx(0)).to.equal(0);
        });

        for (let i = 1; i <= 10; i++) {
            it(`should get block ${i}`, () => {
                for (let j = 0; j < 100; j++) {
                    expect(tss.getClosestBlockIdx(i * 100 + j)).to.equal(i - 1);
                }
            });
        }
    });
});
